Up to date
Int () 3 32
Let () 0 (PTy (I 32)) (Int () 3 32) (Int () 4 32)
(PTy (I 32),())
1:32: 
Expected i32 but got i64
Rec () [Func () 2 [((),3,PTy (I 32))] (PTy (I 32)) (Var () 3)] (Call () (Var () 2) [Var () 1])
(PTy (I 32),())
Rec () [Func () 5 [((),7,PTy (I 32))] (PTy (I 32)) (Case () (Var () 7) [Just 0 :=> Int () 0 32,Nothing :=> Prim () (BinArith Add) [Var () 7,Call () (Var () 5) [Prim () (BinArith Sub) [Var () 7,Int () 1 32]]]]),Func () 6 [((),8,PTy (I 32))] (PTy (I 32)) (Rec () [Func () 9 [((),10,PTy (I 32)),((),11,PTy (I 32))] (PTy (I 32)) (Case () (Var () 10) [Just 0 :=> Var () 11,Nothing :=> Call () (Var () 9) [Prim () (BinArith Sub) [Var () 10,Int () 1 32],Prim () (BinArith Add) [Var () 10,Var () 11]]])] (Call () (Var () 9) [Var () 8,Int () 0 32]))] (Call () (Var () 5) [Int () 4 32])
(PTy (I 32),())
ARec () [AFunc () 5 [((),7,PTy (I 32))] (PTy (I 32)) (ACase () (AVar () 7) [(12,(Just 0,AHalt (AInt () 0 32))),(16,(Nothing,APrim () 13 (PTy (I 32)) (BinArith Sub) [AVar () 7,AInt () 1 32] (ACall () 14 (PTy (I 32)) (AVar () 5) [AVar () 13] (APrim () 15 (PTy (I 32)) (BinArith Add) [AVar () 7,AVar () 14] (AHalt (AVar () 15))))))]),AFunc () 6 [((),8,PTy (I 32))] (PTy (I 32)) (ARec () [AFunc () 9 [((),10,PTy (I 32)),((),11,PTy (I 32))] (PTy (I 32)) (ACase () (AVar () 10) [(17,(Just 0,AHalt (AVar () 11))),(21,(Nothing,APrim () 18 (PTy (I 32)) (BinArith Sub) [AVar () 10,AInt () 1 32] (APrim () 19 (PTy (I 32)) (BinArith Add) [AVar () 10,AVar () 11] (ACall () 20 (PTy (I 32)) (AVar () 9) [AVar () 18,AVar () 19] (AHalt (AVar () 20))))))])] 22 (ACall () 23 (PTy (I 32)) (AVar () 9) [AVar () 8,AInt () 0 32] (AHalt (AVar () 23))))] 24 (ACall () 25 (PTy (I 32)) (AVar () 5) [AInt () 4 32] (AHalt (AVar () 25)))
ARec () [AFunc () 5 [((),7,PTy (I 32))] (PTy (I 32)) (ACase () (AVar () 7) [(12,(Just 0,AHalt (AInt () 0 32))),(16,(Nothing,APrim () 13 (PTy (I 32)) (BinArith Sub) [AVar () 7,AInt () 1 32] (ACall () 14 (PTy (I 32)) (AVar () 5) [AVar () 13] (APrim () 15 (PTy (I 32)) (BinArith Add) [AVar () 7,AVar () 14] (AHalt (AVar () 15))))))]),AFunc () 6 [((),8,PTy (I 32))] (PTy (I 32)) (ARec () [AFunc () 9 [((),10,PTy (I 32)),((),11,PTy (I 32))] (PTy (I 32)) (ACase () (AVar () 10) [(17,(Just 0,AHalt (AVar () 11))),(21,(Nothing,APrim () 18 (PTy (I 32)) (BinArith Sub) [AVar () 10,AInt () 1 32] (APrim () 19 (PTy (I 32)) (BinArith Add) [AVar () 10,AVar () 11] (ATail () 20 (PTy (I 32)) (AVar () 9) [AVar () 18,AVar () 19]))))])] 22 (ATail () 23 (PTy (I 32)) (AVar () 9) [AVar () 8,AInt () 0 32]))] 24 (ATail () 25 (PTy (I 32)) (AVar () 5) [AInt () 4 32])
fromList [(5,fromList [FnCall {isTail = False, callerOf = Just 16, actualsOf = [AVar (Anno {_loc = SourcePos {sourceName = "", sourceLine = Pos 4, sourceColumn = Pos 21}, _typ = PTy (I 32), _fvSet = fromList [13], _bvSet = fromList []}) 13], locOf = SourcePos {sourceName = "", sourceLine = Pos 4, sourceColumn = Pos 17}},FnCall {isTail = True, callerOf = Just 24, actualsOf = [AInt (Anno {_loc = SourcePos {sourceName = "", sourceLine = Pos 14, sourceColumn = Pos 8}, _typ = PTy (I 32), _fvSet = fromList [], _bvSet = fromList []}) 4 32], locOf = SourcePos {sourceName = "", sourceLine = Pos 14, sourceColumn = Pos 4}}]),(9,fromList [FnCall {isTail = True, callerOf = Just 21, actualsOf = [AVar (Anno {_loc = SourcePos {sourceName = "", sourceLine = Pos 10, sourceColumn = Pos 15}, _typ = PTy (I 32), _fvSet = fromList [18], _bvSet = fromList []}) 18,AVar (Anno {_loc = SourcePos {sourceName = "", sourceLine = Pos 10, sourceColumn = Pos 29}, _typ = PTy (I 32), _fvSet = fromList [19], _bvSet = fromList []}) 19], locOf = SourcePos {sourceName = "", sourceLine = Pos 10, sourceColumn = Pos 12}},FnCall {isTail = True, callerOf = Just 22, actualsOf = [AVar (Anno {_loc = SourcePos {sourceName = "", sourceLine = Pos 13, sourceColumn = Pos 6}, _typ = PTy (I 32), _fvSet = fromList [8], _bvSet = fromList []}) 8,AInt (Anno {_loc = SourcePos {sourceName = "", sourceLine = Pos 13, sourceColumn = Pos 9}, _typ = PTy (I 32), _fvSet = fromList [], _bvSet = fromList []}) 0 32], locOf = SourcePos {sourceName = "", sourceLine = Pos 13, sourceColumn = Pos 3}}]),(12,fromList [FnCall {isTail = True, callerOf = Just 5, actualsOf = [], locOf = SourcePos {sourceName = "", sourceLine = Pos 2, sourceColumn = Pos 3}}]),(16,fromList [FnCall {isTail = True, callerOf = Just 5, actualsOf = [], locOf = SourcePos {sourceName = "", sourceLine = Pos 2, sourceColumn = Pos 3}}]),(17,fromList [FnCall {isTail = True, callerOf = Just 9, actualsOf = [], locOf = SourcePos {sourceName = "", sourceLine = Pos 8, sourceColumn = Pos 5}}]),(21,fromList [FnCall {isTail = True, callerOf = Just 9, actualsOf = [], locOf = SourcePos {sourceName = "", sourceLine = Pos 8, sourceColumn = Pos 5}}]),(22,fromList [FnCall {isTail = True, callerOf = Just 6, actualsOf = [], locOf = SourcePos {sourceName = "", sourceLine = Pos 7, sourceColumn = Pos 3}}]),(24,fromList [FnCall {isTail = True, callerOf = Nothing, actualsOf = [], locOf = SourcePos {sourceName = "", sourceLine = Pos 1, sourceColumn = Pos 1}}])]

define i32 @f5(i32 %x7) {
  switch i32 %x7, label %x16 [
    i32 0, label %x12
  ]
x12:
  ret i32 0
x16:
  %x13 = sub i32 %x7, 1
  %x14 = call i32 @f5(i32 %x13)
  %x15 = add i32 %x7, %x14
  ret i32 %x15
}
define i32 @f9(i32 %x10, i32 %x11) {
  switch i32 %x10, label %x21 [
    i32 0, label %x17
  ]
x17:
  ret i32 %x11
x21:
  %x18 = sub i32 %x10, 1
  %x19 = add i32 %x10, %x11
  %x20 = musttail call i32 @f9(i32 %x18, i32 %x19)
  ret i32 %x20
}
define i32 @f6(i32 %x8) {
  br label %x22
x22:
  %x23 = tail call i32 @f9(i32 %x8, i32 0)
  ret i32 %x23
}
define i32 @main() {
  br label %x24
x24:
  %x25 = tail call i32 @f5(i32 4)
  ret i32 %x25
}
fromList [16,17,21,22,24]
Rec () [Func () 5 [((),6,PTy (I 32)),((),7,PTy (I 32))] (PTy (I 32)) (Rec () [Func () 8 [((),9,PTy (I 32)),((),10,PTy (I 32))] (PTy (I 32)) (Case () (Var () 9) [Just 0 :=> Var () 10,Nothing :=> Call () (Var () 8) [Prim () (BinArith Sub) [Var () 9,Int () 1 32],Prim () (BinArith Add) [Var () 7,Var () 10]]])] (Call () (Var () 8) [Var () 6,Int () 0 32]))] (Call () (Var () 5) [Int () 10 32,Int () 11 32])
(PTy (I 32),())
ARec () [AFunc () 5 [((),6,PTy (I 32)),((),7,PTy (I 32))] (PTy (I 32)) (ARec () [AFunc () 8 [((),9,PTy (I 32)),((),10,PTy (I 32))] (PTy (I 32)) (ACase () (AVar () 9) [(11,(Just 0,AHalt (AVar () 10))),(15,(Nothing,APrim () 12 (PTy (I 32)) (BinArith Sub) [AVar () 9,AInt () 1 32] (APrim () 13 (PTy (I 32)) (BinArith Add) [AVar () 7,AVar () 10] (ATail () 14 (PTy (I 32)) (AVar () 8) [AVar () 12,AVar () 13]))))])] 16 (ATail () 17 (PTy (I 32)) (AVar () 8) [AVar () 6,AInt () 0 32]))] 18 (ATail () 19 (PTy (I 32)) (AVar () 5) [AInt () 10 32,AInt () 11 32])
fromList [(5,fromList [FnCall {isTail = True, callerOf = Just 18, actualsOf = [AInt (Anno {_loc = SourcePos {sourceName = "", sourceLine = Pos 8, sourceColumn = Pos 9}, _typ = PTy (I 32), _fvSet = fromList [], _bvSet = fromList []}) 10 32,AInt (Anno {_loc = SourcePos {sourceName = "", sourceLine = Pos 8, sourceColumn = Pos 16}, _typ = PTy (I 32), _fvSet = fromList [], _bvSet = fromList []}) 11 32], locOf = SourcePos {sourceName = "", sourceLine = Pos 8, sourceColumn = Pos 4}}]),(8,fromList [FnCall {isTail = True, callerOf = Just 15, actualsOf = [AVar (Anno {_loc = SourcePos {sourceName = "", sourceLine = Pos 5, sourceColumn = Pos 15}, _typ = PTy (I 32), _fvSet = fromList [12], _bvSet = fromList []}) 12,AVar (Anno {_loc = SourcePos {sourceName = "", sourceLine = Pos 5, sourceColumn = Pos 29}, _typ = PTy (I 32), _fvSet = fromList [13], _bvSet = fromList []}) 13], locOf = SourcePos {sourceName = "", sourceLine = Pos 5, sourceColumn = Pos 12}},FnCall {isTail = True, callerOf = Just 16, actualsOf = [AVar (Anno {_loc = SourcePos {sourceName = "", sourceLine = Pos 7, sourceColumn = Pos 9}, _typ = PTy (I 32), _fvSet = fromList [6], _bvSet = fromList []}) 6,AInt (Anno {_loc = SourcePos {sourceName = "", sourceLine = Pos 7, sourceColumn = Pos 12}, _typ = PTy (I 32), _fvSet = fromList [], _bvSet = fromList []}) 0 32], locOf = SourcePos {sourceName = "", sourceLine = Pos 7, sourceColumn = Pos 6}}]),(11,fromList [FnCall {isTail = True, callerOf = Just 8, actualsOf = [], locOf = SourcePos {sourceName = "", sourceLine = Pos 3, sourceColumn = Pos 5}}]),(15,fromList [FnCall {isTail = True, callerOf = Just 8, actualsOf = [], locOf = SourcePos {sourceName = "", sourceLine = Pos 3, sourceColumn = Pos 5}}]),(16,fromList [FnCall {isTail = True, callerOf = Just 5, actualsOf = [], locOf = SourcePos {sourceName = "", sourceLine = Pos 2, sourceColumn = Pos 3}}]),(18,fromList [FnCall {isTail = True, callerOf = Nothing, actualsOf = [], locOf = SourcePos {sourceName = "", sourceLine = Pos 1, sourceColumn = Pos 1}}])]
fromList [8,11,15,16,18]

define i32 @f5(i32 %x6, i32 %x7) {
  br label %x16
x8:
  %x9 = phi i32 [%x12, %x15], [%x6, %x16]
  %x10 = phi i32 [%x13, %x15], [0, %x16]
  switch i32 %x9, label %x15 [
    i32 0, label %x11
  ]
x11:
  ret i32 %x10
x15:
  %x12 = sub i32 %x9, 1
  %x13 = add i32 %x7, %x10
  br label %x8
x16:
  br label %x8
}
define i32 @main() {
  br label %x18
x18:
  %x19 = tail call i32 @f5(i32 10, i32 11)
  ret i32 %x19
}
fromList [8,11,16,17,19]
5:16: this function belongs in a basic block and can only be called in tail position

define i256 @f7(i32 %x8) {
  %x15 = add i256 0, 0
  br label %x22
x10:
  %x11 = phi i32 [%x17, %x21], [%x8, %x22]
  %x12 = phi i256 [%x18, %x21], [0, %x22]
  %x13 = phi i256 [%x19, %x21], [1, %x22]
  switch i32 %x11, label %x21 [
    i32 0, label %x16
  ]
x16:
  ret i256 %x12
x21:
  %x17 = sub i32 %x11, 1
  %x18 = add i256 %x15, %x13
  %x19 = add i256 %x12, %x13
  br label %x10
x22:
  br label %x10
}
define i32 @main() {
  br label %x24
x24:
  %x25 = call i256 @f7(i32 100)
  ret i32 0
}

define i256 @f8(i32 %x9, i256 %x10, i256 %x11) {
  switch i32 %x9, label %x17 [
    i32 0, label %x13
  ]
x13:
  ret i256 %x10
x17:
  %x14 = sub i32 %x9, 1
  %x15 = add i256 %x10, %x11
  %x16 = musttail call i256 @f8(i32 %x14, i256 %x11, i256 %x15)
  ret i256 %x16
}
define i256 @f6(i32 %x7) {
  br label %x18
x18:
  %x19 = tail call i256 @f8(i32 %x7, i256 0, i256 1)
  ret i256 %x19
}
define i32 @main() {
  br label %x20
x20:
  %x21 = call i256 @f6(i32 100)
  ret i32 0
}

define i32 @f6(i32(i32, i32)* %x7, i32 %x8) {
  %x12 = tail call i32 %x7(i32 %x8, i32 %x8)
  ret i32 %x12
}
define i32 @f9(i32 %x10, i32 %x11) {
  %x14 = mul i32 %x10, %x10
  %x15 = mul i32 %x11, %x11
  %x16 = add i32 %x14, %x15
  ret i32 %x16
}
define i32 @main() {
  br label %x13
x13:
  br label %x17
x17:
  %x18 = tail call i32 @f6(i32(i32, i32)* @f9, i32 3)
  ret i32 %x18
}

define i32 @main() {
  %x9 = add i32 0, 0
  br label %x22
x5:
  %x7 = phi i32 [%x19, %x21], [4, %x22]
  switch i32 %x7, label %x16 [
    i32 0, label %x11
    i32 1, label %x13
  ]
x11:
  %x10 = add i32 %x9, 1
  ret i32 %x10
x13:
  %x12 = add i32 %x9, 0
  ret i32 %x12
x16:
  %x14 = sub i32 %x7, 1
  br label %x6
x6:
  %x8 = phi i32 [%x14, %x16]
  switch i32 %x8, label %x21 [
    i32 0, label %x17
    i32 1, label %x18
  ]
x17:
  ret i32 0
x18:
  ret i32 1
x21:
  %x19 = sub i32 %x8, 1
  br label %x5
x22:
  br label %x5
}

define i32 @f2(<2 x i32> %x3) {
  %x4 = musttail call i32 @f2(<2 x i32> <i32 0, i32 1>)
  ret i32 %x4
}
define i32 @main() {
  br label %x5
x5:
  ret i32 0
}

define i32 @f2({i32, i32} %x3) {
  %x4 = musttail call i32 @f2({i32, i32} {i32 0, i32 1})
  ret i32 %x4
}
define i32 @main() {
  br label %x5
x5:
  ret i32 0
}

define i32 @f2({i64, {i32, i64}, {<2 x i32>, i32}} %x3) {
  %x4 = insertvalue {<2 x i32>, i32} {<2 x i32> undef, i32 5}, <2 x i32> <i32 3, i32 4>, 0
  %x5 = insertvalue {i64, {i32, i64}, {<2 x i32>, i32}} {i64 0, {i32, i64} {i32 1, i64 2}, {<2 x i32>, i32} undef}, {<2 x i32>, i32} %x4, 2
  %x6 = musttail call i32 @f2({i64, {i32, i64}, {<2 x i32>, i32}} %x5)
  ret i32 %x6
}
define i32 @main() {
  br label %x7
x7:
  ret i32 0
}
2:5: 
Expected {i64, {i32, i64}, {<2 x i32>, i32}} but got {i64, {i32, i64}, {<2 x i32>, i33}}

define i32 @f3({i64, {i32, i64}, {<2 x i32>, i32}} %x4) {
  %x6 = insertvalue {<2 x i32>, i32} {<2 x i32> undef, i32 5}, <2 x i32> <i32 3, i32 4>, 0
  %x7 = insertvalue {i64, {i32, i64}, {<2 x i32>, i32}} {i64 0, {i32, i64} {i32 1, i64 2}, {<2 x i32>, i32} undef}, {<2 x i32>, i32} %x6, 2
  %x8 = musttail call i32 @f3({i64, {i32, i64}, {<2 x i32>, i32}} %x7)
  ret i32 %x8
}
define i32 @main() {
  br label %x9
x9:
  ret i32 0
}

define <4 x i32> @f3(<4 x i32> %x4, <4 x i32> %x5) {
  %x6 = add <4 x i32> %x4, %x5
  ret <4 x i32> %x6
}
define i32 @main() {
  br label %x7
x7:
  ret i32 0
}
1:58: 
Expected <4 x i32> but got <4 x i64>
1:58: 
Expected <4 x i32> but got <5 x i32>

define [2 x i32] @f2([2 x i32] %x3) {
  ret [2 x i32] [i32 0, i32 1]
}
define i32 @main() {
  br label %x4
x4:
  ret i32 0
}

define i32* @f3({i32, [5 x <4 x i32>]}* %x4, i32 %x5) {
  %x6 = getelementptr {i32, [5 x <4 x i32>]}, {i32, [5 x <4 x i32>]}* %x4, i32 0, i32 1, i32 %x5, i32 %x5
  ret i32* %x6
}
define i32 @main() {
  br label %x7
x7:
  ret i32 0
}
1:66: 
Expected array but got i32*

define i32** @f3({i32, [5 x <4 x i32*>]}* %x4, i32 %x5) {
  %x6 = getelementptr {i32, [5 x <4 x i32*>]}, {i32, [5 x <4 x i32*>]}* %x4, i32 0, i32 1, i32 %x5, i32 %x5
  ret i32** %x6
}
define i32 @main() {
  br label %x7
x7:
  ret i32 0
}

define i64 @f3([5 x [2 x i64]] %x4, i32 %x5) {
  %x6 = extractvalue [5 x [2 x i64]] %x4, 0, 1
  ret i64 %x6
}
define i32 @main() {
  br label %x7
x7:
  ret i32 0
}

define i16 @f3(<10 x i16> %x4, i32 %x5) {
  %x6 = add <10 x i16> %x4, %x4
  %x7 = extractelement <10 x i16> %x6, i32 %x5
  ret i16 %x7
}
define i32 @main() {
  br label %x8
x8:
  ret i32 0
}

define i32 @f2([4 x {i32, [2 x [3 x i32]]}] %x3) {
  %x4 = extractvalue [4 x {i32, [2 x [3 x i32]]}] %x3, 1, 0
  %x5 = extractvalue [4 x {i32, [2 x [3 x i32]]}] %x3, 2, 1, 1, 0
  %x6 = add i32 %x4, %x5
  ret i32 %x6
}
define i32 @main() {
  br label %x7
x7:
  ret i32 0
}
1:68: 
Index 3 is out of bounds for type [3 x i32]

define i32 @f2(i32** %x3) {
  %ptr1 = getelementptr i32*, i32** %x3, i32 0
  %x4 = load i32*, i32** %ptr1
  %ptr2 = getelementptr i32, i32* %x4, i32 0
  %x5 = load i32, i32* %ptr2
  ret i32 %x5
}
define i32 @main() {
  br label %x6
x6:
  ret i32 0
}

define i32 @f2(i32* %x3) {
  %ptr1 = getelementptr i32, i32* %x3, i32 0
  store i32 1, i32* %ptr1
  ret i32 0
}
define i32 @main() {
  br label %x4
x4:
  ret i32 0
}

define i32 @f2([4 x {i32, [2 x [3 x i32]]}]* %x3) {
  %ptr1 = getelementptr [4 x {i32, [2 x [3 x i32]]}], [4 x {i32, [2 x [3 x i32]]}]* %x3, i32 0, i32 1, i32 0
  %x4 = load i32, i32* %ptr1
  %ptr2 = getelementptr [4 x {i32, [2 x [3 x i32]]}], [4 x {i32, [2 x [3 x i32]]}]* %x3, i32 0, i32 2, i32 1, i32 1, i32 2
  %x5 = load i32, i32* %ptr2
  %x6 = add i32 %x4, %x5
  %ptr3 = getelementptr [4 x {i32, [2 x [3 x i32]]}], [4 x {i32, [2 x [3 x i32]]}]* %x3, i32 0, i32 3, i32 0
  store i32 %x6, i32* %ptr3
  ret i32 0
}
define i32 @main() {
  br label %x7
x7:
  ret i32 0
}

define [2 x i32] @f2([2 x i32] %x3) {
  %x4 = insertvalue [2 x i32] %x3, i32 1, 0
  %x5 = insertvalue [2 x i32] %x4, i32 2, 1
  ret [2 x i32] %x5
}
define i32 @main() {
  br label %x6
x6:
  ret i32 0
}

define {i32, i32} @f2([2 x {i32, i32}] %x3) {
  %x4 = extractvalue [2 x {i32, i32}] %x3, 0
  %x5 = extractvalue [2 x {i32, i32}] %x3, 1, 0
  %x6 = extractvalue [2 x {i32, i32}] %x3, 1, 1
  %x7 = add i32 %x5, %x6
  %x8 = insertvalue {i32, i32} %x4, i32 %x7, 1
  ret {i32, i32} %x8
}
define i32 @main() {
  br label %x9
x9:
  ret i32 0
}

define [2 x {i32, i32}] @f2([2 x {i32, i32}] %x3) {
  %x4 = extractvalue [2 x {i32, i32}] %x3, 1
  %x5 = extractvalue [2 x {i32, i32}] %x3, 1, 0
  %x6 = extractvalue [2 x {i32, i32}] %x3, 1, 1
  %x7 = add i32 %x5, %x6
  %x8 = insertvalue {i32, i32} %x4, i32 %x7, 1
  %x9 = insertvalue [2 x {i32, i32}] %x3, {i32, i32} %x8, 0
  %x10 = extractvalue [2 x {i32, i32}] %x3, 0
  %x11 = insertvalue [2 x {i32, i32}] %x9, {i32, i32} %x10, 1
  ret [2 x {i32, i32}] %x11
}
define i32 @main() {
  br label %x12
x12:
  ret i32 0
}

declare i32 @bar(i8*) nounwind
declare i8* @foo(i32) nounwind
define i32 @main() {
  %x1 = call i8* @foo(i32 0)
  %x2 = tail call i32 @bar(i8* %x1)
  ret i32 %x2
}

define i32 @main() {
  %x2 = alloca i32
  store i32 4, i32* %x2
  %x3 = insertvalue {i32, i32*} {i32 3, i32* undef}, i32* %x2, 1
  %x4 = alloca {i32, i32*}
  store {i32, i32*} %x3, {i32, i32*}* %x4
  %ptr3 = getelementptr {i32, i32*}, {i32, i32*}* %x4, i32 0, i32 1
  %x5 = load i32*, i32** %ptr3
  %ptr4 = getelementptr i32, i32* %x5, i32 0
  %x6 = load i32, i32* %ptr4
  ret i32 %x6
}

define i32 @f2({i32, [2 x i32]}* %x3) {
  %ptr1 = getelementptr {i32, [2 x i32]}, {i32, [2 x i32]}* %x3, i32 0, i32 1
  store [2 x i32] [i32 3, i32 4], [2 x i32]* %ptr1
  ret i32 0
}
define i32 @main() {
  br label %x4
x4:
  %x5 = alloca {i32, [2 x i32]}
  store {i32, [2 x i32]} {i32 2, [2 x i32] [i32 5, i32 6]}, {i32, [2 x i32]}* %x5
  %x6 = call i32 @f2({i32, [2 x i32]}* %x5)
  ret i32 %x6
}

define i32 @f3({i32, {[2 x i32], i32}}* %x4, i32 %x5) {
  %x6 = insertvalue [2 x i32] [i32 3, i32 undef], i32 %x5, 1
  %ptr1 = getelementptr {i32, {[2 x i32], i32}}, {i32, {[2 x i32], i32}}* %x4, i32 0, i32 1, i32 0
  store [2 x i32] %x6, [2 x i32]* %ptr1
  ret i32 0
}
define i32 @main() {
  br label %x7
x7:
  %x8 = alloca {i32, {[2 x i32], i32}}
  store {i32, {[2 x i32], i32}} {i32 2, {[2 x i32], i32} {[2 x i32] [i32 5, i32 6], i32 7}}, {i32, {[2 x i32], i32}}* %x8
  %x9 = call i32 @f3({i32, {[2 x i32], i32}}* %x8, i32 1)
  ret i32 %x9
}

define i32 @main() {
  %x2 = alloca {i32, i32*}
  store {i32, i32*} {i32 7, i32* null}, {i32, i32*}* %x2
  %x3 = insertvalue {i32, {i32, i32*}*} {i32 6, {i32, i32*}* undef}, {i32, i32*}* %x2, 1
  %x4 = alloca {i32, {i32, i32*}*}
  store {i32, {i32, i32*}*} %x3, {i32, {i32, i32*}*}* %x4
  %x5 = insertvalue {i32, {i32, {i32, i32*}*}*} {i32 5, {i32, {i32, i32*}*}* undef}, {i32, {i32, i32*}*}* %x4, 1
  %x6 = alloca {i32, {i32, {i32, i32*}*}*}
  store {i32, {i32, {i32, i32*}*}*} %x5, {i32, {i32, {i32, i32*}*}*}* %x6
  %x7 = insertvalue {i32, {i32, {i32, {i32, i32*}*}*}*} {i32 4, {i32, {i32, {i32, i32*}*}*}* undef}, {i32, {i32, {i32, i32*}*}*}* %x6, 1
  %x8 = alloca {i32, {i32, {i32, {i32, i32*}*}*}*}
  store {i32, {i32, {i32, {i32, i32*}*}*}*} %x7, {i32, {i32, {i32, {i32, i32*}*}*}*}* %x8
  %x9 = insertvalue {i32, {i32, {i32, {i32, {i32, i32*}*}*}*}*} {i32 3, {i32, {i32, {i32, {i32, i32*}*}*}*}* undef}, {i32, {i32, {i32, {i32, i32*}*}*}*}* %x8, 1
  %x10 = alloca {i32, {i32, {i32, {i32, {i32, i32*}*}*}*}*}
  store {i32, {i32, {i32, {i32, {i32, i32*}*}*}*}*} %x9, {i32, {i32, {i32, {i32, {i32, i32*}*}*}*}*}* %x10
  %ptr6 = getelementptr {i32, {i32, {i32, {i32, {i32, i32*}*}*}*}*}, {i32, {i32, {i32, {i32, {i32, i32*}*}*}*}*}* %x10, i32 0, i32 1
  %x11 = load {i32, {i32, {i32, {i32, i32*}*}*}*}*, {i32, {i32, {i32, {i32, i32*}*}*}*}** %ptr6
  %ptr7 = getelementptr {i32, {i32, {i32, {i32, i32*}*}*}*}, {i32, {i32, {i32, {i32, i32*}*}*}*}* %x11, i32 0, i32 1
  %x12 = load {i32, {i32, {i32, i32*}*}*}*, {i32, {i32, {i32, i32*}*}*}** %ptr7
  %ptr8 = getelementptr {i32, {i32, {i32, i32*}*}*}, {i32, {i32, {i32, i32*}*}*}* %x12, i32 0, i32 1
  %x13 = load {i32, {i32, i32*}*}*, {i32, {i32, i32*}*}** %ptr8
  %ptr9 = getelementptr {i32, {i32, i32*}*}, {i32, {i32, i32*}*}* %x13, i32 0, i32 1
  %x14 = load {i32, i32*}*, {i32, i32*}** %ptr9
  %ptr10 = getelementptr {i32, i32*}, {i32, i32*}* %x14, i32 0, i32 0
  %x15 = load i32, i32* %ptr10
  ret i32 %x15
}

define <4 x i8> @f2(<4 x i8> %x3) {
  %x4 = shufflevector <4 x i8> %x3, <4 x i8> %x3, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  ret <4 x i8> %x4
}
define i32 @main() {
  br label %x5
x5:
  ret i32 0
}

define <54 x i32> @f7(<54 x i32> %x12) {
  %x18 = shufflevector <54 x i32> %x12, <54 x i32> %x12, <54 x i32> <i32 6, i32 3, i32 0, i32 7, i32 4, i32 1, i32 8, i32 5, i32 2, i32 18, i32 19, i32 20, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 27, i32 28, i32 29, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 36, i32 37, i32 38, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 9, i32 10, i32 11, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53>
  ret <54 x i32> %x18
}
define <54 x i32> @f8(<54 x i32> %x13) {
  %x19 = shufflevector <54 x i32> %x13, <54 x i32> %x13, <54 x i32> <i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 11, i32 14, i32 17, i32 10, i32 13, i32 16, i32 9, i32 12, i32 15, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 33, i32 30, i32 27, i32 34, i32 31, i32 28, i32 35, i32 32, i32 29, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36>
  ret <54 x i32> %x19
}
define <54 x i32> @f9(<54 x i32> %x14) {
  %x20 = shufflevector <54 x i32> %x14, <54 x i32> %x14, <54 x i32> <i32 6, i32 3, i32 0, i32 7, i32 4, i32 1, i32 8, i32 5, i32 2, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 47, i32 50, i32 53, i32 46, i32 49, i32 52, i32 45, i32 48, i32 51>
  ret <54 x i32> %x20
}
define <54 x i32>* @f10(<54 x i32>* %x15) {
  %ptr1 = getelementptr <54 x i32>, <54 x i32>* %x15, i32 0
  %x21 = load <54 x i32>, <54 x i32>* %ptr1
  %x22 = shufflevector <54 x i32> %x21, <54 x i32> %x21, <54 x i32> <i32 6, i32 3, i32 0, i32 7, i32 4, i32 1, i32 8, i32 5, i32 2, i32 18, i32 19, i32 20, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 27, i32 28, i32 29, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 36, i32 37, i32 38, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 9, i32 10, i32 11, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53>
  %ptr2 = getelementptr <54 x i32>, <54 x i32>* %x15, i32 0
  store <54 x i32> %x22, <54 x i32>* %ptr2
  ret <54 x i32>* %x15
}
define <54 x i32>* @f11(<54 x i32>* %x17) {
  %x23 = call <54 x i32>* @f10(<54 x i32>* %x17)
  %x24 = call <54 x i32>* @f10(<54 x i32>* %x23)
  %x25 = call <54 x i32>* @f10(<54 x i32>* %x24)
  %x26 = musttail call <54 x i32>* @f10(<54 x i32>* %x25)
  ret <54 x i32>* %x26
}
define i32 @main() {
  br label %x27
x27:
  ret i32 0
}

declare void @puts(i8*) nounwind
define i32 @main() {
  %x2 = alloca [12 x i8]
  store [12 x i8] [i8 104, i8 101, i8 108, i8 108, i8 111, i8 32, i8 119, i8 111, i8 114, i8 108, i8 100, i8 0], [12 x i8]* %x2
  %x3 = bitcast [12 x i8]* %x2 to i8*
  call void @puts(i8* %x3)
  ret i32 0
}

define {i32, i32} @f2(i32 %x3) {
  %x4 = insertvalue {i32, i32} {i32 undef, i32 undef}, i32 %x3, 1
  %x5 = insertvalue {i32, i32} %x4, i32 %x3, 0
  ret {i32, i32} %x5
}
define i32 @main() {
  br label %x6
x6:
  ret i32 0
}

define {i32, i32} @f2(i32 %x3) {
  %x4 = insertvalue {i32, i32} {i32 undef, i32 undef}, i32 %x3, 1
  %x5 = insertvalue {i32, i32} %x4, i32 %x3, 0
  ret {i32, i32} %x5
}
define i32 @main() {
  br label %x6
x6:
  ret i32 0
}

%point = type {i32, i32}
define %point @f2(i32 %x3) {
  %x4 = insertvalue %point {i32 undef, i32 undef}, i32 %x3, 1
  %x5 = insertvalue %point %x4, i32 %x3, 0
  ret %point %x5
}
define i32 @main() {
  br label %x6
x6:
  ret i32 0
}

declare void @puts(i8*) nounwind
define i32 @main() {
  %x2 = alloca [12 x i8]
  store [12 x i8] [i8 104, i8 101, i8 108, i8 108, i8 111, i8 32, i8 119, i8 111, i8 114, i8 108, i8 100, i8 0], [12 x i8]* %x2
  %x3 = bitcast [12 x i8]* %x2 to i8*
  call void @puts(i8* %x3)
  ret i32 0
}

%cons = type {i32, %cons*}
define i32 @f2(%cons* %x3) {
  %x4 = icmp eq %cons* %x3, null
  switch i1 %x4, label %x10 [
    i1 1, label %x5
  ]
x5:
  ret i32 0
x10:
  %ptr1 = getelementptr %cons, %cons* %x3, i32 0, i32 0
  %x6 = load i32, i32* %ptr1
  %ptr2 = getelementptr %cons, %cons* %x3, i32 0, i32 1
  %x7 = load %cons*, %cons** %ptr2
  %x8 = call i32 @f2(%cons* %x7)
  %x9 = add i32 %x6, %x8
  ret i32 %x9
}
define i32 @main() {
  br label %x11
x11:
  %x12 = alloca %cons
  store %cons {i32 3, %cons* null}, %cons* %x12
  %x13 = insertvalue %cons {i32 2, %cons* undef}, %cons* %x12, 1
  %x14 = alloca %cons
  store %cons %x13, %cons* %x14
  %x15 = insertvalue %cons {i32 1, %cons* undef}, %cons* %x14, 1
  %x16 = alloca %cons
  store %cons %x15, %cons* %x16
  %x17 = call i32 @f2(%cons* %x16)
  ret i32 %x17
}
